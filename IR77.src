dnl   Copyright (c) 2009 by Christian Dietrich <stettberger@dokucode.de>
dnl   This program is free software; you can redistribute it and/or modify
dnl   it under the terms of the GNU General Public License version 3 or later
dnl   as published by the Free Software Foundation.
dnl  
dnl   This program is distributed in the hope that it will be useful,
dnl   but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl   GNU General Public License for more details.
dnl  
dnl   You should have received a copy of the GNU General Public License
dnl   along with this program; if not, write to the Free Software
dnl   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
dnl  
dnl   For more information on the GPL, please go to:
dnl   http://www.gnu.org/copyleft/gpl.html
dnl

dnl enum State           { Stop,   Pause,  Play,   Record, Reward, Forward, StateLen};
dnl uint16_t commands[] = {0x1420, 0x143C, 0x1430, 0x1431, 0x1435, 0x1436 };

enum State            {Stop,   Play,   Record, Reward, Forward, StateLen};
uint16_t commands[] = {0x1420, 0x1430, 0x1431, 0x1435, 0x1436 };
dnl char *texts[]       = {"Stop", "Play", "Record", "Reward", "Forward"};
dnl char *texts[]       = {"\xff", "\x2", "\x3", "\x4\x4", "\x2\x2"};
char *texts[]       = {"Stop \xff", "Play \x2", "Record \x3", "Reward \x4\x4", "Forward \x2\x2"};

uint8_t characters[][8] = {
	{0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b}, /* Pause */
	{0x10, 0x18, 0x1c, 0x1e, 0x1f, 0x1e, 0x18, 0x10}, /* Play */
	{0x04, 0x0e, 0x0e, 0x1f, 0x1f, 0x0e, 0x0e, 0x04}, /* Record */
	{0x01, 0x03, 0x07, 0x0f, 0x1f, 0x0f, 0x03, 0x01}, /* Reward */
};

define(`CMD_Exit',  0x1409)
define(`CMD_Mute',  0x141C)
define(`CMD_Pause', 0x143C)

uint8_t old_state = 0xff, state = Stop;

C6_HEADER(`#include <util/delay.h>')

CONTROL_START
   uint16_t delay = 0;

   ON STARTUP DO
     TTY_CLEAR();
     TTY_WRITE("-- Revox-IR77 --");
     TTY_CREATE_WINDOW(rc5, 1, 16, 1, 0);
     TTY_SELECT(rc5);
     TTY_WRITE("Code: 0686 \x01\x02\x03\xff"); 
     hd44780_define_char(1, characters[0]);
     hd44780_define_char(2, characters[1]);
     hd44780_define_char(3, characters[2]);
     hd44780_define_char(4, characters[3]);
     uint8_t i;
     for (i = 0; i < 100; i++) {
	wdt_kick();
       _delay_ms(21);
     }
   END 
 



  uint8_t i;
  uint16_t rc5 = RC5_GET();
  for ( i = 0; i < StateLen; i++)
    if (rc5 == commands[i])
      state = i;

  PIN_CLEAR(CHANNEL1);
  PIN_CLEAR(CHANNEL3);
  PIN_CLEAR(CHANNEL4);
  PIN_CLEAR(CHANNEL5);
  PIN_CLEAR(CHANNEL6);

  if (state == Stop      && old_state != state) { PIN_SET(CHANNEL1); delay = 50; }
  if (state == Play      && old_state != state) { PIN_SET(CHANNEL3); delay = 50; }
  if (state == Record    && old_state != state) { PIN_SET(CHANNEL4); _delay_ms(400);
						  PIN_SET(CHANNEL3); delay = 50; }
  if (state == Reward    && old_state != state) { PIN_SET(CHANNEL5); delay = 50; }
  if (state == Forward   && old_state != state) { PIN_SET(CHANNEL6); delay = 50; }

  if (rc5 == CMD_Exit)  { PIN_TOGGLE(CHANNEL7); delay = 50; }
  if (rc5 == CMD_Mute)  { PIN_TOGGLE(CHANNEL8); delay = 50; }
  if (rc5 == CMD_Pause) { PIN_TOGGLE(CHANNEL2); delay = 50; }


  if (delay) {
    TTY_SELECT(rc5);
    TTY_HOME();
    TTY_CLEAR();
    TTY_WRITE("%s%c", texts[state], PIN_HIGH(CHANNEL2) ? 1 : 0);

    while(delay--) {
      wdt_kick();
      _delay_ms(21);
    }
    while(RC5_GET()) {}; /* Clear the RC5 Buffer */
  }

  old_state = state;
CONTROL_END
